rm(list=ls())#
setwd("")#
library(seqinr)#
#
#abif functions in seqinr#
  #baselineabif#
  #peakabif#
  #plotabif#
  #plotladder#
  #read.abif#
  #stutterabif#
#
raw.trace<-read.abif("./Data/Yeast Data/578_P1103732_084.ab1", verbose=F)
raw.trace<-read.abif("./Data/Yeast Data/578_P1103732_084.ab1", verbose=F)
raw.trace<-read.abif("/Users/LowDecarie/Documents/PhD/Experiments (PhD)/Environmental Sequencing/True Sequences/Data/Yeast Data/mix_P1103732_017.ab1", verbose=F)
/Users/LowDecarie/Documents/PhD/Experiments (PhD)/Environmental Sequencing/True Sequences
raw.trace
###### Simulate The Assemblage #############
base<-c('A','C','T','G')#
#
num_sp<-20#
seq_len<-100#
#
sp<-array(auto_corr(base,degree=num_sp*10,len=num_sp*seq_len,n_order=num_sp),dim=c(num_sp,seq_len))  ## <degree> allows for control of polymorphism. If species A is 'T' at a loci, the next species has a 10x higher than random chance of being a 'T', etc.#
#
sp<-t(sp)  # Species Sequences#
#
sp_freq<-runif(num_sp,0,100)  # Species Frequencies (TRUE)#
sp_freq<-sp_freq/sum(sp_freq)#
## Because the signal from the sequencer is normalized, we need to simulate our data accordingly. ###
#
par(mfrow=c(1,2))#
plot(sp_freq,sp_freq_noise)#
abline(0,1)#
hist(sp_freq-sp_freq_noise)
## Simulates Species assemblages to test likelihood model on sequence data ###
## Corey Chivers & Etienne Low-Decarie, 2010 ###
#
rm(list=ls())#
#
#
auto_corr<-function(x,degree=1,len,n_order) ## Draws autocorrelated samples where A is <degree> times as likely to follow A than independence. New samples are independent every <n_order> sample (ie to allow bases to be autocorrelated at a locus across <n_order> species to control the level of polymorphism ).#
{#
     ret_vec<-array(dim=len)#
     ret_vec[1]<-sample(x,1)#
     length.x<-length(x)#
     prob<-array(1/length.x,dim=length.x)#
     for(i in 2:len)#
     {#
          prob[]<-(1/length.x)#
          prob[which(x==ret_vec[i-1])]=(1/length.x)*degree#
          prob<-prob/sum(prob) # normalize#
          if(i%%(n_order+1)!=0) ## only reset independence every <n_order> draws#
          {#
               ret_vec[i]<-sample(x,1,prob=prob)#
          }else#
          {#
               ret_vec[i]<-sample(x,1)     #
          }#
     }#
     return(ret_vec)#
}#
#
#
#
###### Simulate The Assemblage #############
base<-c('A','C','T','G')#
#
num_sp<-20#
seq_len<-100#
#
sp<-array(auto_corr(base,degree=num_sp*10,len=num_sp*seq_len,n_order=num_sp),dim=c(num_sp,seq_len))  ## <degree> allows for control of polymorphism. If species A is 'T' at a loci, the next species has a 10x higher than random chance of being a 'T', etc.#
#
sp<-t(sp)  # Species Sequences#
#
sp_freq<-runif(num_sp,0,100)  # Species Frequencies (TRUE)#
sp_freq<-sp_freq/sum(sp_freq)#
## Because the signal from the sequencer is normalized, we need to simulate our data accordingly. ###
#
par(mfrow=c(1,2))#
plot(sp_freq,sp_freq_noise)#
abline(0,1)#
hist(sp_freq-sp_freq_noise)
###################################################################
##
#Initial set up#
##
###################################################################
#clear r memory#
rm(list=ls())#
#
#set working directory#
setwd("/Users/LowDecarie/Documents/PhD/Environmental sample sequencing")#
#
#load libraries#
library(gtools)	#needed for the rdirichlet function for the sampling of a sum to 1 space#
#
#
#
#
#
###################################################################
##
#Species Simulation Functions#
##
###################################################################
#
#create data frame of simulated species sequences#
create.sp<-function(n.sp, n.loci)#
{		#
		n.code<-4#
		code<-c("G","T","C","A")#
		sp<-seq(1:n.sp)#
		loci<-seq(1:n.loci)#
		sp.seq<-data.frame(sp=sort(rep(rep(sp, n.loci),n.code)),loci=rep(sort(rep(loci, n.code)), n.sp), code=rep(code, n.sp*n.loci), f=0)#
		#
		seq<-sample(code,n.sp*n.loci, replace=T)#
		rep.4<-function(x){rep.int(x,4)}#
		seq<-as.vector(sapply(seq,rep.4))#
		sp.seq$f[sp.seq$code==seq]<-1#
		sp.seq#
}
#create a list of frequencies parameters for each species in sp.seq#
create.randomf<-function(sp.seq)#
{#
	#extract values from sp.seq#
	n.sp<-length(unique(sp.seq$sp))#
	#create random parameters summing to 1#
	f.p<-round(t(rdirichlet(1, rep(1,n.sp))),3)#
	f.p#
}
head(create.sp)
head(sp.seq)
create.sp(10, 10)
