trace.plot<-qplot(data=melt.trace,
x=datum,
y=value,
colour=variable,
geom="line",
xlim=region
)
trace.plot+geom_text(aes(y=I(max(value)),
label=base.call,
colour=base.call,
alpha=peak))+
opts(legend.position = "none")+
scale_alpha_manual(values=c(0,1),guide="none")
trace.plot+geom_text(aes(y=I(4000),
label=base.call,
colour=base.call,
alpha=peak))+
opts(legend.position = "none")+
scale_alpha_manual(values=c(0,1),guide="none")
trace.plot+geom_text(aes(y=smooth.max+10,
label=base.call,
colour=base.call,
alpha=peak))+
opts(legend.position = "none")+
scale_alpha_manual(values=c(0,1),guide="none")
trace.plot+geom_text(aes(y=rep(max(smooth.max),length(smooth.max)),
label=base.call,
colour=base.call,
alpha=peak))+
opts(legend.position = "none")+
scale_alpha_manual(values=c(0,1),guide="none")
pdf("./Plots/Adam_F_trace_plots.pdf")
base.call<-T
for(split in c(F,T)){
plot.A7_F<-plot_trace(A7_F,
region=c(5000,5500),
print.plot=F,
main="A7_F",
split=split,
base.call=base.call)
plot.B7_F<-plot_trace(B7_F,
region=c(5000,5500),
print.plot=F,
main="B7_F",
split=split,
base.call=base.call)
plot.AB7_F<-plot_trace(AB7_F,
region=c(5000,5500),
print.plot=F,
main="B7_F",
split=split,
base.call=base.call)
grid.arrange(plot.A7_F,
plot.B7_F,
plot.AB7_F)
}
dev.off()
dev.off()
pdf("./Plots/Adam_F_trace_plots.pdf")
base.call<-T
for(split in c(F,T)){
plot.A7_F<-plot_trace(A7_F,
region=c(5000,5500),
print.plot=F,
main="A7_F",
split=split,
base.call=base.call)
plot.B7_F<-plot_trace(B7_F,
region=c(5000,5500),
print.plot=F,
main="B7_F",
split=split,
base.call=base.call)
plot.AB7_F<-plot_trace(AB7_F,
region=c(5000,5500),
print.plot=F,
main="B7_F",
split=split,
base.call=base.call)
grid.arrange(plot.A7_F,
plot.B7_F,
plot.AB7_F)
}
dev.off()
rm(list=ls())
setwd("~/Documents/PhD/Experiments/community-DNA-fingerprinting")
source("./R/plot_trace.R")
source("./R/get_trace.R")
source("./R/smooth_trace.R")
source("./R/get_peak.R")
if(!require(gridExtra)){
install.packages("gridExtra")}
A7_F<-get_trace("./Data/Adam data/7A_F.ab1", width=c(5), type=c("Savitsky-Golay"))
B7_F<-get_trace("./Data/Adam data/7B_F.ab1", width=c(5), type=c("Savitsky-Golay"))
AB7_F<-get_trace("./Data/Adam data/7A+B_F.ab1", width=c(5), type=c("Savitsky-Golay"))
pdf("./Plots/Adam_F_trace_plots.pdf")
base.call<-T
for(split in c(F,T)){
plot.A7_F<-plot_trace(A7_F,
region=c(5000,5500),
print.plot=F,
main="A7_F",
split=split,
base.call=base.call)
plot.B7_F<-plot_trace(B7_F,
region=c(5000,5500),
print.plot=F,
main="B7_F",
split=split,
base.call=base.call)
plot.AB7_F<-plot_trace(AB7_F,
region=c(5000,5500),
print.plot=F,
main="B7_F",
split=split,
base.call=base.call)
grid.arrange(plot.A7_F,
plot.B7_F,
plot.AB7_F)
}
dev.off()
rm(list=ls())
setwd("~/Documents/PhD/Experiments/community-DNA-fingerprinting")
source("./R/plot_trace.R")
source("./R/get_trace.R")
source("./R/smooth_trace.R")
source("./R/get_peak.R")
if(!require(gridExtra)){
install.packages("gridExtra")}
A7_F<-get_trace("./Data/Adam data/7A_F.ab1", width=c(5), type=c("Savitsky-Golay"))
B7_F<-get_trace("./Data/Adam data/7B_F.ab1", width=c(5), type=c("Savitsky-Golay"))
AB7_F<-get_trace("./Data/Adam data/7A+B_F.ab1", width=c(5), type=c("Savitsky-Golay"))
pdf("./Plots/Adam_F_trace_plots.pdf")
base.call<-T
for(split in c(F,T)){
plot.A7_F<-plot_trace(A7_F,
region=c(5000,5500),
print.plot=F,
main="A7_F",
split=split,
base.call=base.call)
plot.B7_F<-plot_trace(B7_F,
region=c(5000,5500),
print.plot=F,
main="B7_F",
split=split,
base.call=base.call)
plot.AB7_F<-plot_trace(AB7_F,
region=c(5000,5500),
print.plot=F,
main="B7_F",
split=split,
base.call=base.call)
grid.arrange(plot.A7_F,
plot.B7_F,
plot.AB7_F)
}
dev.off()
pdf("./Plots/Adam_F_trace_plots.pdf")
base.call<-T
for(split in c(F,T)){
plot.A7_F<-plot_trace(A7_F,
region=c(5000,5500),
print.plot=F,
main="A7_F",
split=split,
base.call=base.call)
plot.B7_F<-plot_trace(B7_F,
region=c(5000,5500),
print.plot=F,
main="B7_F",
split=split,
base.call=base.call)
plot.AB7_F<-plot_trace(AB7_F,
region=c(5000,5500),
print.plot=F,
main="B7_F",
split=split,
base.call=base.call)
grid.arrange(plot.A7_F,
plot.B7_F,
plot.AB7_F)
}
dev.off()
plot_trace<-function(trace,
region=c(1, length(trace[,1])),
print.plot=T,
split=F,
maxed=F,
base.call=T,
...){
#region<-c(5000,5500)
if(!require(ggplot2)){
install.packages("ggplot2")}
if(!require(reshape2)){
install.packages("reshape2")}
melt.trace<-melt(data=trace,
measure.vars=c("A",
"T",
"C",
"G"))
trace.plot<-qplot(data=melt.trace,
x=datum,
y=value,
colour=variable,
geom="line",
xlim=region,
...)
if(split){
trace.plot<-trace.plot+facet_grid(.~variable)
}
if(maxed){trace.plot<-trace.plot+geom_line(aes(y=smooth.max,
colour="maxed values"))}
if(base.call){trace.plot<-trace.plot+geom_text(aes(y=rep(0,length(value)),
label=base.call,
colour=base.call,
alpha=peak))+
opts(legend.position = "none")+
scale_alpha_manual(values=c(0,1),guide="none")}
if(print.plot){
print(trace.plot)
}
return(trace.plot)
}
pdf("./Plots/Adam_F_trace_plots.pdf")
base.call<-T
for(split in c(F,T)){
plot.A7_F<-plot_trace(A7_F,
region=c(5000,5500),
print.plot=F,
main="A7_F",
split=split,
base.call=base.call)
plot.B7_F<-plot_trace(B7_F,
region=c(5000,5500),
print.plot=F,
main="B7_F",
split=split,
base.call=base.call)
plot.AB7_F<-plot_trace(AB7_F,
region=c(5000,5500),
print.plot=F,
main="B7_F",
split=split,
base.call=base.call)
grid.arrange(plot.A7_F,
plot.B7_F,
plot.AB7_F)
}
dev.off()
?SolexaQuality
rm(list=ls())
setwd("~/Documents/PhD/Experiments/community-DNA-fingerprinting")
source("./R/plot_trace.R")
source("./R/get_trace.R")
source("./R/smooth_trace.R")
source("./R/get_peak.R")
if(!require(gridExtra)){
install.packages("gridExtra")}
A7_F<-get_trace("./Data/Adam data/7A_F.ab1", width=c(5), type=c("Savitsky-Golay"))
B7_F<-get_trace("./Data/Adam data/7B_F.ab1", width=c(5), type=c("Savitsky-Golay"))
AB7_F<-get_trace("./Data/Adam data/7A+B_F.ab1", width=c(5), type=c("Savitsky-Golay"))
pdf("./Plots/Adam_F_trace_plots.pdf")
base.call<-T
for(split in c(F,T)){
plot.A7_F<-plot_trace(A7_F,
region=c(5000,5500),
print.plot=F,
main="A7_F",
split=split,
base.call=base.call)
plot.B7_F<-plot_trace(B7_F,
region=c(5000,5500),
print.plot=F,
main="B7_F",
split=split,
base.call=base.call)
plot.AB7_F<-plot_trace(AB7_F,
region=c(5000,5500),
print.plot=F,
main="B7_F",
split=split,
base.call=base.call)
grid.arrange(plot.A7_F,
plot.B7_F,
plot.AB7_F)
}
dev.off()
#This function extracts traces from .ab1 files
#and performs smoothing of values
#function dependencies
# -smooth_trace
get_trace<-function(file,type="Savitsky-Golay", width=10,rm.min=TRUE, min.peak=1000){
#Load and/or install required packages
if(!require(seqinr)){
install.packages("seqinr")}
#Load raw data
raw.trace<-read.abif(file, verbose=F)
#Extract trace data
trace<-data.frame(datum=1:length(raw.trace$Data[["DATA.1"]]),
A=raw.trace$Data[["DATA.1"]],
T=raw.trace$Data[["DATA.2"]],
C=raw.trace$Data[["DATA.3"]],
G=raw.trace$Data[["DATA.4"]])
#Call bases
trace<-ddply(.data=trace,
.variable="datum",
function(x){
base<-"N"
base.call.quality<-0
sum.value=sum(x$A,x$T,x$C,x$G)
max.value=max(x$A,x$T,x$C,x$G)
if(x$A>max(x$T,x$C,x$G)){
base<-"A"
base.call.quality<-x$A/sum.value
}
if(x$T>max(x$A,x$C,x$G)){
base<-"T"
base.call.quality<-x$T/sum.value
}
}
if(x$C>max(x$T,x$A,x$G)){
base<-"C"
base.call.quality<-x$C/sum.value
}
if(x$G>max(x$T,x$C,x$A)){
base<-"G"
base.call.quality<-x$A/sum.value
}
}
trace<-data.frame(x,base.call=base,
max.value=max.value,
sum.value=sum.value,
base.call.quality=base.call.quality)
return(trace)},
.progress="text")
#Smooth max value
trace$smooth.max<-as.numeric(with(trace, smooth_trace(max.value, type, width)))
trace$smooth.max[is.na(trace$smooth.max)]<-0
#Get peaks
trace$peak<-with(trace, get_peak(smooth.max, rm.min, min.peak))
return(trace)
}
#This function extracts traces from .ab1 files
#and performs smoothing of values
#function dependencies
# -smooth_trace
get_trace<-function(file,type="Savitsky-Golay", width=10,rm.min=TRUE, min.peak=1000){
#Load and/or install required packages
if(!require(seqinr)){
install.packages("seqinr")}
#Load raw data
raw.trace<-read.abif(file, verbose=F)
#Extract trace data
trace<-data.frame(datum=1:length(raw.trace$Data[["DATA.1"]]),
A=raw.trace$Data[["DATA.1"]],
T=raw.trace$Data[["DATA.2"]],
C=raw.trace$Data[["DATA.3"]],
G=raw.trace$Data[["DATA.4"]])
#Call bases
trace<-ddply(.data=trace,
.variable="datum",
function(x){
base<-"N"
base.call.quality<-0
sum.value=sum(x$A,x$T,x$C,x$G)
max.value=max(x$A,x$T,x$C,x$G)
if(x$A>max(x$T,x$C,x$G)){
base<-"A"
base.call.quality<-x$A/sum.value
}
if(x$T>max(x$A,x$C,x$G)){
base<-"T"
base.call.quality<-x$T/sum.value
}
if(x$C>max(x$T,x$A,x$G)){
base<-"C"
base.call.quality<-x$C/sum.value
}
if(x$G>max(x$T,x$C,x$A)){
base<-"G"
base.call.quality<-x$A/sum.value
}
trace<-data.frame(x,base.call=base,
max.value=max.value,
sum.value=sum.value,
base.call.quality=base.call.quality)
return(trace)},
.progress="text")
#Smooth max value
trace$smooth.max<-as.numeric(with(trace, smooth_trace(max.value, type, width)))
trace$smooth.max[is.na(trace$smooth.max)]<-0
#Get peaks
trace$peak<-with(trace, get_peak(smooth.max, rm.min, min.peak))
return(trace)
}
rm(list=ls())
setwd("~/Documents/PhD/Experiments/community-DNA-fingerprinting")
source("./R/plot_trace.R")
source("./R/get_trace.R")
source("./R/smooth_trace.R")
source("./R/get_peak.R")
if(!require(gridExtra)){
install.packages("gridExtra")}
A7_F<-get_trace("./Data/Adam data/7A_F.ab1", width=c(5), type=c("Savitsky-Golay"))
B7_F<-get_trace("./Data/Adam data/7B_F.ab1", width=c(5), type=c("Savitsky-Golay"))
AB7_F<-get_trace("./Data/Adam data/7A+B_F.ab1", width=c(5), type=c("Savitsky-Golay"))
pdf("./Plots/Adam_F_trace_plots.pdf")
base.call<-T
for(split in c(F,T)){
plot.A7_F<-plot_trace(A7_F,
region=c(5000,5500),
print.plot=F,
main="A7_F",
split=split,
base.call=base.call)
plot.B7_F<-plot_trace(B7_F,
region=c(5000,5500),
print.plot=F,
main="B7_F",
split=split,
base.call=base.call)
plot.AB7_F<-plot_trace(AB7_F,
region=c(5000,5500),
print.plot=F,
main="B7_F",
split=split,
base.call=base.call)
grid.arrange(plot.A7_F,
plot.B7_F,
plot.AB7_F)
}
dev.off()
head(A7_F)
head(A7_F[A7_F[peak,])
head(A7_F[A7_F$peak,])
bases<-A7_F[A7_F$peak,]
qplot(data=bases,
y=base.call.quality,
x=datum,
colour=base.call)
bases_A7_F<-A7_F[A7_F$peak,]
bases_B7_F<-B7_F[B7_F$peak,]
bases_AB7_F<-AB7_F[AB7_F$peak,]
?DNAString
species<-A7_F
species<-bases_A7_F$base.call
species<-DNAString(species)
head(species)
species<-DNAString(as.character(species))
head(as.character(species))
DNA_BASES
DNA_ALPHABET
d <- DNAString("TTGAAAA-CTC-N")
d
?past
?paste
?cat
cat(species)
species<-DNAString(cat(as.character(species)))
head(species)
species
cat(as.character(species))
DNAString(as.character(cat(as.character(species))))
paste(species, sep="")
paste(species, sep="", collapse="")
DNAString(paste(species, sep="", collapse=""))
species<-DNAString(paste(species, sep="", collapse=""))
head(species)
community<-bases_AB7_F
community<-DNAString(paste(community, sep="", collapse=""))
paste(community, sep="", collapse="")
community<-bases_AB7_F$base.call
community<-DNAString(paste(community, sep="", collapse=""))
community
alignement<-pairwiseAlignment(species,
community)
alignement
summary(alignement)
str(alignement)
mat <- nucleotideSubstitutionMatrix(match = 1, mismatch = -3, baseOnly = TRUE)
mat
SolexaQuality(rep(c(22L, 12L), times = c(36, 18))
)
str(SolexaQuality(rep(c(22L, 12L), times = c(36, 18))))
?SolexaQuality
SolexaQuality(0:40)
IlluminaQuality(0:40)
mapping <- diag(4)
dimnames(mapping) <- list(DNA_BASES, DNA_BASES)
mapping["C", "T"] <- mapping["T", "C"] <- 1
mapping["G", "A"] <- mapping["A", "G"] <- 1
mapping
SolexaQuality(rep(c(22L, 12L), times = c(36, 18)))
alignement<-pairwiseAlignment(species,
community)
alignement
species
community
alignement<-pairwiseAlignment(pattern=species,
subject=community,
type="global")
alignement
alignement<-pairwiseAlignment(pattern=species,
subject=community,
type="overlap")
alignement
alignement<-pairwiseAlignment(pattern=species,
subject=community,
type="global")
SolexaQuality(rep(c(22L, 12L), times = c(36, 18)))
?SolexaQuality
