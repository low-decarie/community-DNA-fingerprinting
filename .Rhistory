###### Simulate The Assemblage #############
base<-c('A','C','T','G')#
#
num_sp<-20#
seq_len<-100#
#
sp<-array(auto_corr(base,degree=num_sp*10,len=num_sp*seq_len,n_order=num_sp),dim=c(num_sp,seq_len))  ## <degree> allows for control of polymorphism. If species A is 'T' at a loci, the next species has a 10x higher than random chance of being a 'T', etc.#
#
sp<-t(sp)  # Species Sequences#
#
sp_freq<-runif(num_sp,0,100)  # Species Frequencies (TRUE)#
sp_freq<-sp_freq/sum(sp_freq)#
## Because the signal from the sequencer is normalized, we need to simulate our data accordingly. ###
#
par(mfrow=c(1,2))#
plot(sp_freq,sp_freq_noise)#
abline(0,1)#
hist(sp_freq-sp_freq_noise)
## Simulates Species assemblages to test likelihood model on sequence data ###
## Corey Chivers & Etienne Low-Decarie, 2010 ###
#
rm(list=ls())#
#
#
auto_corr<-function(x,degree=1,len,n_order) ## Draws autocorrelated samples where A is <degree> times as likely to follow A than independence. New samples are independent every <n_order> sample (ie to allow bases to be autocorrelated at a locus across <n_order> species to control the level of polymorphism ).#
{#
ret_vec<-array(dim=len)#
ret_vec[1]<-sample(x,1)#
length.x<-length(x)#
prob<-array(1/length.x,dim=length.x)#
for(i in 2:len)#
{#
prob[]<-(1/length.x)#
prob[which(x==ret_vec[i-1])]=(1/length.x)*degree#
prob<-prob/sum(prob) # normalize#
if(i%%(n_order+1)!=0) ## only reset independence every <n_order> draws#
{#
ret_vec[i]<-sample(x,1,prob=prob)#
}else#
{#
ret_vec[i]<-sample(x,1)     #
}#
}#
return(ret_vec)#
}#
#
#
#
###### Simulate The Assemblage #############
base<-c('A','C','T','G')#
#
num_sp<-20#
seq_len<-100#
#
sp<-array(auto_corr(base,degree=num_sp*10,len=num_sp*seq_len,n_order=num_sp),dim=c(num_sp,seq_len))  ## <degree> allows for control of polymorphism. If species A is 'T' at a loci, the next species has a 10x higher than random chance of being a 'T', etc.#
#
sp<-t(sp)  # Species Sequences#
#
sp_freq<-runif(num_sp,0,100)  # Species Frequencies (TRUE)#
sp_freq<-sp_freq/sum(sp_freq)#
## Because the signal from the sequencer is normalized, we need to simulate our data accordingly. ###
#
par(mfrow=c(1,2))#
plot(sp_freq,sp_freq_noise)#
abline(0,1)#
hist(sp_freq-sp_freq_noise)
###################################################################
##
#Initial set up#
##
###################################################################
#clear r memory#
rm(list=ls())#
#
#set working directory#
setwd("/Users/LowDecarie/Documents/PhD/Environmental sample sequencing")#
#
#load libraries#
library(gtools)	#needed for the rdirichlet function for the sampling of a sum to 1 space#
#
#
#
#
#
###################################################################
##
#Species Simulation Functions#
##
###################################################################
#
#create data frame of simulated species sequences#
create.sp<-function(n.sp, n.loci)#
{		#
n.code<-4#
code<-c("G","T","C","A")#
sp<-seq(1:n.sp)#
loci<-seq(1:n.loci)#
sp.seq<-data.frame(sp=sort(rep(rep(sp, n.loci),n.code)),loci=rep(sort(rep(loci, n.code)), n.sp), code=rep(code, n.sp*n.loci), f=0)#
#
seq<-sample(code,n.sp*n.loci, replace=T)#
rep.4<-function(x){rep.int(x,4)}#
seq<-as.vector(sapply(seq,rep.4))#
sp.seq$f[sp.seq$code==seq]<-1#
sp.seq#
}
#create a list of frequencies parameters for each species in sp.seq#
create.randomf<-function(sp.seq)#
{#
#extract values from sp.seq#
n.sp<-length(unique(sp.seq$sp))#
#create random parameters summing to 1#
f.p<-round(t(rdirichlet(1, rep(1,n.sp))),3)#
f.p#
}
head(create.sp)
head(sp.seq)
create.sp(10, 10)
help(package=seqinr)
rm(list=ls())
library(seqinr)
raw.trace<-read.abif(file.choose(), verbose=F)
fix(raw.trace)
?read.abif
?system.file
clean.trace<-data.frame(datum=1:length(raw.trace$Data[["DATA.1"]]),
A=raw.trace$Data[["DATA.1"]],
T=raw.trace$Data[["DATA.2"]],
C=raw.trace$Data[["DATA.3"]],
G=raw.trace$Data[["DATA.4"]])
clean.trace
head(clean.trace)
library(ggplot2)
library(reshape2)
?melt.data.frame
melt.trace<-melt(data=clean.trace,
id.vars="datum")
head(melt.trace)
qplot(data=melt.trace,
x=datum,
y=value,
colour=variable)
qplot(data=melt.trace,
x=datum,
y=value,
colour=variable,
geom="line")
qplot(data=melt.trace,
x=datum,
y=value,
colour=variable,
geom="line",
xlim=c(5000,5500))
peak.position<-raw.trace$Data[["PLOC.2"]]
peak.position
clean.trace$peak<-FALSE
clean.trace$peak[clean.trace$datum %in% peak.position]<-TRUE
head(clean.trace)
melt.trace<-melt(data=clean.trace,
id.vars="datum")
head(melt.trace)
melt.trace<-melt(data=clean.trace,
id.vars=c("datum", "peak"))
head(melt.trace)
qplot(data=melt.trace,
x=datum,
y=value,
colour=variable,
geom="line",
xlim=c(5000,5500),
alpha=peak)
qplot(data=melt.trace,
x=datum,
y=value,
colour=variable,
geom="line",
xlim=c(5000,5500))+
geom_point(size=peak)
qplot(data=melt.trace,
x=datum,
y=value,
colour=variable,
geom="line",
xlim=c(5000,5500))+
geom_point(aes(size=peak))
?require
if(require(seqinr)==FALSE){
install.packages("seqinr")}
if(!require(seqinr)){
install.packages("seqinr")}
get_trace<-function(file){
if(!require(seqinr)){
install.packages("seqinr")}
#Load raw data
raw.trace<-read.abif(file, verbose=F)
#Extract trace data
clean.trace<-data.frame(datum=1:length(raw.trace$Data[["DATA.1"]]),
A=raw.trace$Data[["DATA.1"]],
T=raw.trace$Data[["DATA.2"]],
C=raw.trace$Data[["DATA.3"]],
G=raw.trace$Data[["DATA.4"]])
#Extract peak position
peak.position<-raw.trace$Data[["PLOC.2"]]
#Add peak position to clean trace data
clean.trace$peak<-FALSE
clean.trace$peak[clean.trace$datum %in% peak.position]<-TRUE
return(clean.trace)}
qplot(data=melt.trace,
x=datum,
y=value,
colour=variable,
geom="line")+
geom_point(aes(size=peak))
trace<-clean.trace
region=c(5000, 5500)
melt_trace<<-function(trace){
melt(data=trace,
id.vars=c("datum", "peak"))}
melt.trace<-melt_trace(trace)
trace.plot<-qplot(data=melt.trace,
x=datum,
y=value,
colour=variable,
geom="line",
xlim=region)
trace.plot
trace.plot<-trace.plot+geom_vline(xintercept=unique(melt.trace$datum[melt.trace$peak]))
trace.plot
trace.plot<-qplot(data=melt.trace,
x=datum,
y=value,
colour=variable,
geom="line",
xlim=region)
trace.plot<-trace.plot+geom_vline(xintercept=unique(melt.trace$datum[melt.trace$peak]),
alpha=I(0.5))
trace.plot
trace.plot<-qplot(data=melt.trace,
x=datum,
y=value,
colour=variable,
geom="line",
xlim=region)
trace.plot<-trace.plot+geom_vline(xintercept=unique(melt.trace$datum[melt.trace$peak]),
alpha=I(0.1))
trace.plot
setwd("~/Documents/PhD/Experiments/community-DNA-fingerprinting")
setwd("~/Documents/PhD/Experiments/community-DNA-fingerprinting")
source("./R/plot_trace.R")
source("./R/get_trace.R")
plot_trace<-function(trace,
region=c(1, length(trace[,1]),
peak.loc=F,
print.plot=T){
if(!require(ggplot2)){
install.packages("ggplot2")}
if(!require(reshape2)){
install.packages("reshape2")}
melt_trace<<-function(trace){
melt(data=trace,
id.vars=c("datum", "peak"))}
melt.trace<-melt_trace(trace)
trace.plot<-qplot(data=melt.trace,
x=datum,
y=value,
colour=variable,
geom="line",
xlim=region)
if(peak.loc){
trace.plot<-trace.plot+geom_vline(xintercept=unique(melt.trace$datum[melt.trace$peak]),
alpha=I(0.1))
}
if(print.plot){
print(trace.plot)
}
return(trace.plot)
}
plot_trace<-function(trace,region=c(1, length(trace[,1]),peak.loc=F, print.plot=T){
if(!require(ggplot2)){
install.packages("ggplot2")}
if(!require(reshape2)){
install.packages("reshape2")}
melt_trace<<-function(trace){
melt(data=trace,
id.vars=c("datum", "peak"))}
melt.trace<-melt_trace(trace)
trace.plot<-qplot(data=melt.trace,
x=datum,
y=value,
colour=variable,
geom="line",
xlim=region)
if(peak.loc){
trace.plot<-trace.plot+geom_vline(xintercept=unique(melt.trace$datum[melt.trace$peak]),
alpha=I(0.1))
}
if(print.plot){
print(trace.plot)
}
return(trace.plot)
}
plot_trace<-function(trace,
region=c(1, length(trace[,1])),
peak.loc=F,
print.plot=T){
if(!require(ggplot2)){
install.packages("ggplot2")}
if(!require(reshape2)){
install.packages("reshape2")}
melt_trace<<-function(trace){
melt(data=trace,
id.vars=c("datum", "peak"))}
melt.trace<-melt_trace(trace)
trace.plot<-qplot(data=melt.trace,
x=datum,
y=value,
colour=variable,
geom="line",
xlim=region)
if(peak.loc){
trace.plot<-trace.plot+geom_vline(xintercept=unique(melt.trace$datum[melt.trace$peak]),
alpha=I(0.1))
}
if(print.plot){
print(trace.plot)
}
return(trace.plot)
}
setwd("~/Documents/PhD/Experiments/community-DNA-fingerprinting")
source("./R/plot_trace.R")
source("./R/get_trace.R")
7A_F<-get_trace("./Data/Adam data/7A_F")
setwd("~/Documents/PhD/Experiments/community-DNA-fingerprinting")
source("./R/plot_trace.R")
source("./R/get_trace.R")
7A_F<-get_trace("./Data/Adam data/7A_F.ab1")
get_trace("./Data/Adam data/7A_F.ab1")
7A_F<-get_trace("./Data/Adam data/7A_F.ab1")
setwd("~/Documents/PhD/Experiments/community-DNA-fingerprinting")
source("./R/plot_trace.R")
source("./R/get_trace.R")
A7_F<-get_trace("./Data/Adam data/7A_F.ab1")
setwd("~/Documents/PhD/Experiments/community-DNA-fingerprinting")
source("./R/plot_trace.R")
source("./R/get_trace.R")
A7_F<-get_trace("./Data/Adam data/7A_F.ab1")
B7_F<-get_trace("./Data/Adam data/7B_F.ab1")
A+B7_F<-get_trace("./Data/Adam data/7A+B_F.ab1")
setwd("~/Documents/PhD/Experiments/community-DNA-fingerprinting")
source("./R/plot_trace.R")
source("./R/get_trace.R")
A7_F<-get_trace("./Data/Adam data/7A_F.ab1")
B7_F<-get_trace("./Data/Adam data/7B_F.ab1")
AB7_F<-get_trace("./Data/Adam data/7A+B_F.ab1")
plot_trace(A7_F, region=c(5000,5500))
require(gridExtra)
help(package=gridExtra)
plot.A7_F<-plot_trace(A7_F, region=c(5000,5500))
plot.A7_F<-plot_trace(B7_F, region=c(5000,5500))
plot.A7_F<-plot_trace(AB7_F, region=c(5000,5500))
grid.arrange(plot.A7_F,
plot.B7_F,
plot.AB7_F)
plot.A7_F<-plot_trace(A7_F, region=c(5000,5500), print.plot=F)
plot.B7_F<-plot_trace(B7_F, region=c(5000,5500), print.plot=F)
plot.AB7_F<-plot_trace(AB7_F, region=c(5000,5500), print.plot=F)
grid.arrange(plot.A7_F,
plot.B7_F,
plot.AB7_F)
setwd("~/Documents/PhD/Experiments/community-DNA-fingerprinting")
source("./R/plot_trace.R")
source("./R/get_trace.R")
setwd("~/Documents/PhD/Experiments/community-DNA-fingerprinting")
source("./R/plot_trace.R")
source("./R/get_trace.R")
require(gridExtra)
A7_F<-get_trace("./Data/Adam data/7A_F.ab1")
B7_F<-get_trace("./Data/Adam data/7B_F.ab1")
AB7_F<-get_trace("./Data/Adam data/7A+B_F.ab1")
plot.A7_F<-plot_trace(A7_F,
region=c(5000,5500),
print.plot=F,
main="A7_F")
plot.B7_F<-plot_trace(B7_F,
region=c(5000,5500),
print.plot=F,
main="B7_F")
plot.AB7_F<-plot_trace(AB7_F,
region=c(5000,5500),
print.plot=F,
main="AB7_F")
grid.arrange(plot.A7_F,
plot.B7_F,
plot.AB7_F)
?curve
sum(1,2,3)
1==1==1
?any
test<-1:10
test[-1:2]
species.traces<-list(melt_trace(A7_F),melt_trace(B7_F))
species1<-species.traces[[1]]
species2<-species.traces[[2]]
head(species1)
community.trace<-melt_trace(AB7_F)
head(community.trace)
q1=5
q2=-10
s1=0.5
s2=0.5
species1<-species.traces[[1]]
species2<-species.traces[[2]]
species1$shifted<-species1$datum+s1
species2$shifted<-species1$datum+s2
species1$quantified<-species1$value*q1
species2$quantified<-species1$value*q2
species1$quantified[!species1$shifted %in% species1$datum]<-0
species2$quantified[!species2$shifted %in% species1$datum]<-0
head(species1)
q1=0.5
q2=0.5
s1=10
s2=-20
species1<-species.traces[[1]]
species2<-species.traces[[2]]
species1$shifted<-species1$datum+s1
species2$shifted<-species1$datum+s2
species1$quantified<-species1$value*q1
species2$quantified<-species1$value*q2
species1$quantified[!species1$shifted %in% species1$datum]<-0
species2$quantified[!species2$shifted %in% species1$datum]<-0
sum.sq<-sum((species1$quantified[species1$shifted]+species2$quantified[species2$shifted]-community.trace$value)^2)
head(species1)
head(species2)
test
test[c(0,0,0,1,2,3)]
test[c(0,0,1, 0,2,3)]
?sin
curve1<-data.frame(x=1:20,
y=sin(1:20))
plot(curve1)
plot(curve1, type="l")
curve1<-data.frame(x=c(1,1,2,2,3),
y=c(3,2,2,1,1))
plot(curve1, type="l")
curve1<-data.frame(x=c(1,1,2,2,3),
y=c(9,6,6,3,3))
plot(curve1, type="l")
curve1<-data.frame(x=c(1,1,2,2,3),
y=c(9,6,6,3,3))
plot(curve1, type="l", xlim=c(0,5), ylim=c(0,10))
curve2<-data.frame(x=c(1,2,2,3,3,4),
y=c(2,2,1,1,2,3))
plot(curve2, type="l")
curve1<-data.frame(x=c(1,1,2,2,3),
y=c(9,6,6,3,3))
plot(curve1, type="l", xlim=c(0,5), ylim=c(0,10))
curve2<-data.frame(x=c(1,2,2,3,3,4),
y=c(2,2,1,1,2,3))
plot(curve1, type="l", xlim=c(0,5), ylim=c(0,10))
with(curve1, plot(x=x, y=y, type="l", xlim=c(0,5), ylim=c(0,10)))
with(curve2, plot(x=x, y=y, type="l", xlim=c(0,5), ylim=c(0,10)))
?line
?lines
curve1<-data.frame(x=c(1,1,2,2,3),
y=c(9,6,6,3,3))
with(curve1, plot(x=x, y=y, type="l", xlim=c(0,5), ylim=c(0,10)))
curve2<-data.frame(x=c(1,2,2,3,3,4),
y=c(2,2,1,1,2,3))
with(curve2, plot(x=x, y=y, type="l", xlim=c(0,5), ylim=c(0,10)))
with(curve1, lines(x=x, y=y, colour="red"))
curve1<-data.frame(x=c(1,1,2,2,3),
y=c(9,6,6,3,3))
with(curve1, plot(x=x, y=y, type="l", xlim=c(0,5), ylim=c(0,10)))
curve2<-data.frame(x=c(1,2,2,3,3,4),
y=c(2,2,1,1,2,3))
with(curve2, plot(x=x, y=y, type="l", xlim=c(0,5), ylim=c(0,10)))
with(curve1, lines(x=x, y=y, col="red"))
curve1<-data.frame(x=c(1,1,2,2,3),
y=c(9,6,6,3,3))
with(curve1, plot(x=x, y=y, type="l", xlim=c(0,10), ylim=c(0,10)))
curve2<-data.frame(x=c(4,5,5,6,6,7),
y=c(2,2,1,1,2,3))
with(curve2, plot(x=x, y=y, type="l", xlim=c(0,10), ylim=c(0,10)))
with(curve1, lines(x=x, y=y, col="red"))
with(curve2, plot(x=x, y=y, type="l", xlim=c(0,10), ylim=c(0,10)))
with(curve1, lines(x=x, y=y, col="red"))
with(curve2, plot(x=x, y=y, type="l", xlim=c(0,10), ylim=c(0,10)))
with(curve1, lines(x=x+3, y=y*1/3, col="red"))
curve1<-data.frame(x=c(1,1,2,2,3),
y=c(9,6,6,3,3))
with(curve1, plot(x=x, y=y, type="l", xlim=c(0,10), ylim=c(0,10)))
curve1<-data.frame(x=c(1,1,2,2,3),
y=c(9,6,6,3,3))
with(curve1, plot(x=x, y=y, type="l", xlim=c(0,10), ylim=c(0,10)))
curve1<-data.frame(x=c(1,1,2,2,3),
y=c(9,6,6,3,3))
with(curve1, plot(x=x, y=y, type="l", xlim=c(0,10), ylim=c(0,10)))
curve2<-data.frame(x=c(4,5,5,6,6,7),
y=c(2,2,1,1,2,3))
with(curve2, plot(x=x, y=y, type="l", xlim=c(0,10), ylim=c(0,10)))
with(curve1, lines(x=x, y=y, col="red"))
with(curve2, plot(x=x, y=y, type="l", xlim=c(0,10), ylim=c(0,10)))
with(curve1, lines(x=x+3, y=y*1/3, col="red"))
curve1<-data.frame(x=c(1,1,2,2,3),
y=c(9,6,6,3,3))
with(curve1, plot(x=x, y=y, type="l", xlim=c(0,10), ylim=c(0,10)))
plot.new()
with(curve1, plot(x=x,
y=y,
type="l",
xlim=c(0,10),
ylim=c(0,10)))
